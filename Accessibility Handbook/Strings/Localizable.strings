/* 
  Localizable.strings
  Accessibility Handbook

  Created by Giovani Nascimento Pereira on 20/09/22.
  
*/
"title" = "Accessibility Handbook";
"handbook" = "Handbook";

// How to use

"VocieOverGuide" = "Voice-Over guide";

// Element Reading Order

"ElementReadingOrder.title" = "Element reading order";

// Navigation

"Navigation.title" = "Navigation";
"Navigation.text1" = "The Voice-Over navigation is based in gestures. Each gesture, can be perfomed anywhere on the screen, and will trigger a certain action.";
"Navigation.text2" = "Once enabled, the Voice-Over will display a frame on top of the current view that is being read. This frame is called 'Cursor'.";
"Navigation.text3" = "To navigate basically means changing the cursor's position, so it will read another element.";
"Navigation.text4" = "The basic navigation can be done swiping horizontally on the screen to move to cursor to the next or previous element.";
"Navigation.comment" = "This entire app was built to be used with the Voice-Over enabled, the concept described on the pages will always be followed by an example so you can try them by yourself!";
"Navigation.image" = "On top is an example of the cursor. The title 'Handbook' is currently focused on the image.";
"Navigation.imageSubtitle" = "Example image of the Voice-Over running on an iOS device.";

// Accessibility Properties

"AccElements.title" = "Accessibility Properties";

// Accessibility Element

"AccElem.title" = "Accessibility Element";
"AccElem.text1" = "When using the Voice-Over, the cursor will focus on 'accessible' elements. These elements are identified by having the property accessibility element as 'True'.";
"AccElem.text2" = "Every element marked with this property 'True' can be focused by the Voice-Over, and the elments with the property 'False' will be ignored.";
"AccElem.text3" = "Turn the Voice-Over on and navigate through the next elements. Some will not be focused by it.";
"AccElem.comment" = "It's important to set elements that should not be focused, such as separators or other elements without accessibility labels, to not be focused.";
"AccElem.comment2" = "This way we prevent empty content, that could confuse the user, to be focused";

"AccElem.example.isAccessibilityElement" = "This is an accessibility element.";

// Accessibility Label

"AccLabel.title" = "Accessibility Label";
"AccLabel.text1" = "Accessibility labels are the content that is going to be read by the Voice-over when the item is focused.";
"AccLabel.text2" = "Every element that is focused by the Voice-Over should have an accessibility label.";
"AccLabel.text3" = "Turn on the Voice-Over and focus on the following element. The content read is it's accessibility label.";
"AccLabel.image" = "Starry Night, by Vincent Van Gogh. This is an accessibility label!";
"AccLabel.comment" = "Some components automatically set their accesibility label when created, such as Texts or Buttons, but you can manually set it if necessary.";
"AccLabel.text4" = "And, sometimes, you can set a different accessibility label to a view, so its easier to understand its content, like describing measurement units or abreviations.";
"AccLabel.example" = "10Kg";
"AccLabel.accessibilityLabelExample" = "10 Kilograms";

// Accessibility Hint

"AccHint.title" = "Accessibility Hint";
"AccHint.text1" = "Accessibility hints are additional content read at the end. They are always the last content to be read.";
"AccHint.text2" = "They are used to provide additional information about a focused item so the user can help better understand how it works.";
"AccHint.text3" = "For instance: You have a cell with a long press gesture (triple tap with a single finger), you may add a hint to tell the user about this additional action.";
"AccHint.comment" = "Hints should be optional to read. They are left as the last element so they can be skiped if the user already knows what to do.";

"AccHint.example.hint" = "Tap three times to copy the order code.";
"AccHint.example.title" = "Your order";
"AccHint.example.message" = "French fries with cheese";
"AccHint.example.footer" = "#123456";
"AccHint.example.notification" = "Order code copied to clipboard";

// Accessibility Trait

"AccTrait.title" = "Accessibility Trait";
"AccTrait.text1" = "Accessibility Traits are modifiers we can add to a view in order to give some additional information or add some behavior to it.";
"AccTrait.text2" = "There are several traits, some of them you may never have to use, and some other ones are really powerful and you'll be gklad to know more about them.";
"AccTrait.text3" = "Traits are so important we have a dedicated section to them!";
"AccTrait.comment1" = "Make sure to check that section to learn more about each trait.";
"AccTrait.text4" = "And adding a trait to a view is very simple.";

// Accessibility Value

"AccValue.title" = "Accessibility Value";
"AccValue.text1" = "Accessibility Values represent the value (most of the times numeric) associated with your view.";
"AccValue.text2" = "It's mostly used in components that represents quantities, like counters, sliders or quick-adds.";
"AccValue.text3" = "And when changed, if the view is focused, the new value will be announced to the user.";
"AccValue.comment1" = "Check the counter example below, change its quantity and notice the 'Accessibility Value' being read.";
"AccValue.comment2" = "This example was built using the 'Adjustable Trait'.";

// Accessibility Priority

"AccPriority.title" = "Accessibility Priority";

"AccPriority.text1" = "Accessibility Sort Priority, in SwiftUI, is a way to change the order of the elements read by the Voice-Over";
"AccPriority.text2" = "It is similar to defining the order of reading the elements using UIKit, but in UIKit we define this order using an array.";
"AccPriority.text3" = "It can be useful in some situations, check the example below:";
"AccPriority.comment1" = "Yes, you can change the reading order of your elements, but most of the time you dont want to do that.";
"AccPriority.comment2" = "As a general guideline, we keep the reading order the same as the natural reading order of the current language";
"AccPriority.comment3" = "For instance, English reads from left-to-right then from top-to-bottom, and thats the order the Voice-Over will try to read the content.";
"AccPriority.notification" = "See how this button even being above the elements, was the last one being focused?.";

"AccPriority.Code.uikitComment" = "The content is read in the array's order";
"AccPriority.Code.swiftUIComment" = "The highest priority is read first";

// Accessibility Traits

"AccTraits.title" = "Accessibility Traits";

// List of traits

"ListOfTraits.title" = "List of Accessibility Traits";

// Adjustable

"Adjustable.title" = "Adjustable trait";

// Colors

"ColorsGuide.title" = "Colors Guide";
"ColorsGuide.introduction" = "Introduction";

// About Colors

"AboutColors.title" = "About Colors";
"AboutColors.text1" = "I like colors.\nBut not everybody experience them in the same way.";
"AboutColors.comment1" = "Some people don't experience them at all!";
"AboutColors.text2" = "Colors are how our brains make sense of the light that reach our eyes. We have cells that will interact with different frequencies of light, and their combination will produce what we see.";
"AboutColors.comment2" = "I'm over extending myself into physics and biology, but bear with me.";
"AboutColors.text3" = "And when building an app, colors are usually something that come before actually programming anything, or during what I like to call 'The design step'.";
"AboutColors.text4" = "So, if you are working on a team with a Designer, I highly recommend you bring these discussion to them. Understanding more about colors, how they affect the users and what we can consider accessibility while handling colors on our app.";
"AboutColors.comment3" = "If you don't have a designer there... Well, I hope this content also helps you understand a little bit more about it!";
"AboutColors.higColors" = "Human Interface Guidelines - Colors";
"AboutColors.image" = "Image of pretty colors";

// Collaboration

"Collaboration.title" = "Collaboration";
"Collaboration.OpenSource.title" = "OpenSource";
"Collaboration.OpenSource.text1" = "Yep, the Handbook is an Open Source project!";
"Collaboration.OpenSource.text2" = "The idea is that the app's code can be used as examples. Take a look into the code,";
"Collaboration.OpenSource.comment1" = "It's not perfect, and it's a little weird in some places... I know that, ok?";
"Collaboration.OpenSource.text3" = "But fell free to suggest changes, fix some bugs and identify issues on our GitHub project!";
"Collaboration.githubPreoject" = "Check our GitHub project!";
"Collaboration.license" = "License";
"Collaboration.Issue.title" = "Found an issue?";
"Collaboration.Issue.text1" = "Report to us on our GitHub project!";
"Collaboration.Issue.text2" = "It could be some translation problem, some accessibility issue (nobody's perfect, okay?), or anything at all!";
"Collaboration.submitIssue" = "Submit an issue report!";
"Collaboration.Translate.title" = "Help us translate";
"Collaboration.Translate.text1" = "If you are a developer and would like to bring the handbook closer to your community and your peers, consider helping us translating the app to other languages!";
"Collaboration.Translate.text2" = "You can get the project on GitHub and open a Pull Requets translating the content!";
"Collaboration.Translate.comment" = "It's a lot of stuff... I know, but the more the merrier!";
"Collaboration.submitPR" = "Submit a Pull Request with the changes!";
"Collaboration.Suggestion.title" = "Want to see something specific?";
"Collaboration.Suggestion.text1" = "Maybe you have something that you wanted to know that is not present on the app";
"Collaboration.Suggestion.text2" = "Or you'd like to suggest a new puzzle to add to the games.";
"Collaboration.Suggestion.text3" = "Fell free to tell us ay idea you have!";
"Collaboration.submitFeatureRequest" = "Submit a feature request!";

// About the app

"AboutTheApp.title" = "About the app";

"AboutTheApp.History.text1" = "The Accessibility Handbook started as an idea with some colleagues and friends, aiming to be an easy way to learn more about iOS accessibility features.";
"AboutTheApp.History.text2" = "At the time we started working on it, but we never got to finish or publish the Handbook. So, a while later, I took what I learned and decided to bring it into the world! Rewriting the contents, adding UIKit and SwiftUI versions to make something really fresh and nice.";
"AboutTheApp.History.text3" = "I always thought the information about accessibility was always there, but you had to know what to look for.";
"AboutTheApp.History.text4" = "That's where this handbook comes, it's something that can be collaborative, easy to use, and fast to find! It's an app! You can carry it around with you and read anytime.";
"AboutTheApp.History.text5" = "It's mostly based on my experiences as a developer, with real-life examples that (I hope) will help you understand more about Accessibility and also help you use in your own projects!";

"AboutTheApp.Game.title" = "What about the Game?";
"AboutTheApp.Game.text1" = "The Handbook was pretty nice and all... but it was a little boring.";
"AboutTheApp.Game.text2" = "So I tryied to make something that would be nicer to use and to learn,";
"AboutTheApp.Game.text3" = "And what best way to do that than with a game?";
"AboutTheApp.Game.comment" = "The puzzles are not supposed to be hard, thay are just a nice way to practice your accessibility knowledge!";

"AboutTheApp.Disclaimer.title" = "Disclaimer";
"AboutTheApp.Disclaimer.text1" = "This app and it's content is supposed to be a helpful guide, based on real development experiences.";
"AboutTheApp.Disclaimer.text2" = "I do not know EVERYTHING about accessibility, and I'm learning a little bit more every day.";
"AboutTheApp.Disclaimer.comment1" = "And I have sure learned a lot while developing this very own app!";
"AboutTheApp.Disclaimer.text3" = "It may have some mistakes or misconceptions, so please, consider reporting if you find any of those.";
"AboutTheApp.Disclaimer.text4" = "I want it to be a reliable tool that can be cosulted during everyday development.";
"AboutTheApp.Disclaimer.openCollaborationPage" = "Check the Collaboration page to see more ways to report issues and to help the app's development!";

// Color blindness

"ColorBlind.title" = "Color Blindness";
"ColorBlind.About.text1" = "Color blindness is a decreased ability to see color differences.";
"ColorBlind.About.text2" = "What you may not know is that there are 'levels' of color blindness. A person with green color deficiency, for example, may not see the green color at all, or may see it a little bit less that a non-color-blind person.";
"ColorBlind.About.text3" = "You may take an Ishihara test to check if you are color blind. I have a friend who discovered she was color blind when we were in college! And before that, I'd expect you to identify this condition much earlier in life.";
"ColorBlind.About.ishihara" = "Example of ishihara color identifying test.";
"ColorBlind.About.comment" = "These above are examples of an Ishihara test. For a 'normal' vision person, it's expected to see '12', '6' and '74' respectively.";
"ColorBlind.About.text4" = "But how does this affect our work when we are building an app?";
"ColorBlind.About.ishiharaTest" = "Ishihara Test";

"ColorBlind.Handle.title" = "Handling content considering colorblindness";
"ColorBlind.Handle.text1" = "First, make sure your content does not rely on colors only to take any actions or to identify informations. Take the example below.";
"ColorBlind.Handle.text2" = "Here, on the first column, we are color coding red the negative items and green the positive ones. But that's exactly what we want to avoid. The second Colum has a much better 'universal' experience where identifying these items as positive or negative does not rely solely on color.";
"ColorBlind.Handle.comment1" = "Using + and - may have cultural connotations, so it may not be the best example here. But it's just an example.";
"ColorBlind.Handle.comment2" = "If you do rely on colors only on some part of your app, don't want to change it, but still want to to make it usable for colorblind users, check our 'Differentiate without colors' page.";

"ColorBlind.Images.title" = "Careful with images";
"ColorBlind.Images.text1" = "Sometimes we render content with images. Banners loaded from Backend, some promotional stuff, or just something that looks nicer on the image render.";
"ColorBlind.Images.comment" = "First, make sure to add an accessibility label to this image!";
"ColorBlind.Images.text2" = "You also need to be careful to not have content ot be read on conflicting colors for color blindness.";

// Contrast

"Contrast.title" = "Contrast";
"Contrast.text1" = "Contrast is the difference in luminance or colour that makes an object (or its representation in an image or display) distinguishable.";
"Contrast.comment1" = "But why talk about contrast on an accessibility context?";
"Contrast.text2" = "Contrast is important when taking colors on your applications. Everything that should be visible should be well... Visible.";
"Contrast.text3" = "By that I mean you should be areful when adding colored text on top of colored backgrounds. The base good contrast is black-on-white (or white-on-black) text.";
"Contrast.comment2" = "But is also depends on the font itself, the font's weight...";

"Contrast.Example.text1" = "A nice way to test for contrast is using the WCAG contrast guide";
"Contrast.Example.comment1" = "WCAG stands for 'Web Content Accessibility Guidelines', and I know it's more directed to web, not mobile environments, but that's also nice to take a look into, specially if you are interested in learning more about contarst in accessibility.";
"Contrast.Example.example1" = "This example above fails the WCAG test for contrast.";
"Contrast.Example.example2" = "This one does kida ok, so you can use this color combination with larger fonts.";
"Contrast.Example.example3" = "And this one is pretty good! The classics.";
"Contrast.Example.link" = "You can try for yourself on this contrast-check tool!";

// Differentiate without colors

"Differentiate.title" = "Differentiate without colors";

"Differentiate.Intro.text1" = "The Differentiate Without Colors, is the way the user can ask to, well, do not use only colors to differentiate content.";
"Differentiate.Intro.text2" = "On code, it's basically going to be a boolean you can check if the user enabled this feature or not.";
"Differentiate.Intro.comment1" = "Although, most of the time, it is a good practice to not use only colors to differentiate content. This is the kind of issue that can be prevented on the 'design step', while planning your app or your feature, and before implementing it.";
"Differentiate.Intro.text3" = "This feature can be enabled on the device's settings at the Accessibility section.";
"Differentiate.Intro.text4" = "Here's a classic example, the wire game! Where you need to connect the wires with the same color on both sides of the screen.";
"Differentiate.Intro.text5" = "By adding icons next to the wires, you make sure the game does not rely only on color coding to be played.";
"Differentiate.Intro.image" = "Image of the Among Us game wire game with multiple color blindness filters applyed.";
"Differentiate.Intro.comment2" = "A nice example is the game 'Among Us'. On the image above, from left-to-right then top-to-bottom: no filter, deuteranopia filter, protanopia filter, tritanopia filter. These weird names are the names of some color blindness types.";

"Differentiate.Handle.text1" = "To check if the feature is enabled, you can check 'UIAccessibility.shouldDifferentiateWithoutColor'";
"Differentiate.Handle.text2" = "And you can alo subscribe to listen to changes in this prtoperty using the Notification Center.";
"Differentiate.Handle.text3" = "And you can use an Environment property in SwiftUI for the same purpose.";

// Color acc feature

"ColorAccessibilityFeatures" = "Color Accessibility Features";

// Reduce Transparency

"ReduceTransparency.title" = "Reduce Transparency";

"ReduceTransparency.Intro.text1" = "This is an accessibility option that needs to be enabled on the Device's settings.";
"ReduceTransparency.Intro.text2" = "When enabled, the user want's to tell you they want to reduce the amount of blur and translucency on the app.";
"ReduceTransparency.Intro.comment" = "Some poeple may have a hard time looking into translucent elements!";

"ReduceTransparency.Example.text1" = "Try enabling and disabling this option and check the content below.";
"ReduceTransparency.Example.example" = "Transparent content to be read\non top of a blured background";

"ReduceTransparency.Code.text1" = "And, it's pretty easy to handle!";
"ReduceTransparency.Code.text2" = "On UIKit, you need to check a boolean on UIAccessibility to check if the feature is enabled.";
"ReduceTransparency.Code.text3" = "And you can alo subscribe to listen to changes in this prtoperty using the Notification Center.";
"ReduceTransparency.Code.text4" = "And on SwiftUI you can use an Environment variable!";

// Invert Colors

"InvertColors.title" = "Invert Colors";

"InvertColors.Intro.text1" = "Color Inversion is another accessibility option a user can enable on the device's settings.";
"InvertColors.Intro.text2" = "There are 2 types of color inversion:";
"InvertColors.Intro.text3" = "Classic - where everything will be inverted;";
"InvertColors.Intro.text4" = "Smart - where (almost) everything in light mode will be inverted, and you (the developer) can choose not to.";
"InvertColors.Intro.comment1" = "But why would anyone use this?";
"InvertColors.Intro.text5" = "I believe it comes down to difficulties in reading dark text on top of a white background. I myself, when I'm not using glasses, I find it pretty difficult to read content like this, so I preffer the dark mode, with white text on top of a dark background.";
"InvertColors.Intro.text6" = "The color inversion comes as an alternative to help you in this scenario.";

"InvertColors.WhatToDo.title" = "What to do as a developer?";
"InvertColors.WhatToDo.text1" = "You basically need to mark what you don't want to be inverted. Like, images, a photo of your dog, a nice hamburguer that would look gross when inverted...";
"InvertColors.WhatToDo.text2" = "And to do so, you simply need to set a boolean telling you dont want this view to be inverted.";

"InvertColors.Example.text1" = "Change the display appearance from light/dark mode and the color inversion setting and check the images below.";
"InvertColors.Example.image1" = "Starry night, by Van Gogh";
"InvertColors.Example.image2" = "Starry night, by Van Gogh. Image does not invert.";
"InvertColors.Example.comment" = "Only the second image is set to not invert colors.";

// Increase Contrast

"IncreaseContrast.title" = "Increase Contrast";

"IncreaseContrast.Intro.text1" = "Another accessibility option the user can enable on the device's settings.";
"IncreaseContrast.Intro.text2" = "This one is also kinda obvious, the user is requesting to enhance contrast between foreground and background colors, so it gets easier to distinguish between them.";

"IncreaseContrast.Property.title" = "Handling contrast changes";
"IncreaseContrast.Property.text1" = "An easy way to support this is by using 'System Colors'. They will automatically adapt to the increase contrast.";
"IncreaseContrast.Property.comment1" = "This app was built using system colors! Change the contrast options on your device's settings and check the differences!";
"IncreaseContrast.Property.text2" = "Or you can use the 'UIAccessibility.accessibilityDisplayShouldIncreaseContrast' boolen to check the current contrast state, and act accordingly.";

"IncreaseContrast.swiftUI.text1" = "And in SwiftUI, there is a neat contrast tool you can use to change the contrast on your views";
"IncreaseContrast.swiftUI.comment1" = "Not that I have really used this contrast tool in any real project.";

"IncreaseContrast.example" = "Example of using the contrast tool. There are 6 images with increasing contrast. ";

// Haptics

"Haptic.text1" = "Haptics are little vibrations the device can make";
"Haptic.text2" = "There are several types of Haptics, and each one is used to represent something different.";
"Haptic.comment1" = "But... why are we talking about haptics in an accessibility guide?";
"Haptic.text3" = "Haptics are a type of feedback. When you select something, when something suceeds...";
"Haptic.text4" = "It's an additional layer of feedback. Imagine most actions have some kind of visual feedback, like when you tap a button and it changes it's color slightly so you know the button is pressed.";
"Haptic.text5" = "Since sometimes we cannot rely on visual cues, the Haptics can be a very interesting and powerful way to improve accessibility.";

"HapticList.title" = "List of Haptics";
"HapticList.text1" = "Here's a list of the Haptics available:";
"HapticList.comment" = "I also suggest you check the source code of this project. It has a nive Haptic wrapper to be used on UIKit or SwiftUI!";
"HapticList.sourceCode" = "Haptic source code";

"Haptics.selection" = "Selection";
"Haptics.success" = "Success";
"Haptics.error" = "Error";
"Haptics.warning" = "Warning";
"Haptics.lighImpact" = "Light Impact";
"Haptics.mediumImpact" = "Medium Impact";
"Haptics.heavyImpact" = "Heavy Impact";

// Actions

"doubleTapToCopy" = "Tap twice to copy";
"appleDoc" = " See more on Apple's documentation for \"%@\"";
"nextPage" = "Next page %@";
"backToIndex" = "Back to Index";
"goPlay" = "Go play it!";
"moreOnWikipedia" = "More on Wikipedia";
"more" = "More";
"moreOnTheWeb" = "More on the Web";
"dedicatedPage" = "Dedicated page";

// Some nouns

"freeShipping" = "Free shipping";
"additionalCost" = "Additional cost";
"earlyAccess" = "Early access";
"extraBureaucracy" = "Extra bureaucracy";
"regularText" = "Regular text";
"boldText" = "Bold text";
"openSettings" = "Open Settings";
"haptic" = "Haptic";
"haptics" = "Haptics";
"moon" = "Moon";
"cloud" = "Cloud";
"sun" = "Sun";
"sunrise" = "Sunrise";
"snow" = "Snow";
"rain" = "Rain";
"fog" = "Fog";
"weatherIcons" = "Weather Icons";
